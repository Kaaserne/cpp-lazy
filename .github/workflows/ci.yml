name: Continuous Integration

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

  workflow_dispatch: ~

env:
  CMAKE_CONFIG_TYPE: Release
  CTEST_OUTPUT_ON_FAILURE: 1
  CATCH_VERSION: '2.13.9'

jobs:
  gcc:
    strategy:
      matrix:
        version: [8, 10, 11]
        standard: [11, 20]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - uses: friendlyanon/fetch-core-count@v1
        id: cores

      - name: Install GCC ${{ matrix.version }}
        run: sudo apt-get install -y
          gcc-${{ matrix.version }} g++-${{ matrix.version }}

      - name: Configure (install)
        env:
          CC: gcc-${{ matrix.version }}
          CXX: g++-${{ matrix.version }}
        run: cmake -S . -B build/install
          -D CMAKE_CXX_STANDARD:STRING=${{ matrix.standard }}
          -D CMAKE_BUILD_TYPE:STRING=Release
          -D CMAKE_INSTALL_PREFIX=build/prefix
          -D "CMAKE_PROJECT_FMT_INCLUDE_BEFORE=$(pwd)/cmake/fmtPICFix.cmake"

      - name: Build (install)
        run: cmake --build build/install -j ${{ steps.cores.outputs.plus_one }}

      - name: Install
        run: cmake --install build/install

      - name: Configure tests
        run: cmake -S tests -B build/tests
          -D CMAKE_BUILD_TYPE:STRING=Release
          -D CPP-LAZY_CATCH_VERSION:STRING=$CATCH_VERSION
          -D TEST_INSTALLED_VERSION:BOOL=YES
          -D CMAKE_INSTALL_PREFIX=build/prefix

      - name: Build tests
        run: cmake --build build/tests -j ${{ steps.cores.outputs.plus_one }}

      - name: Run tests
        working-directory: build/tests
        run: ctest -VV -j ${{ steps.cores.outputs.plus_one }}

  clang:
    strategy:
      matrix:
        version: [9, 11, 12]
        standard: [11, 20]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - uses: friendlyanon/fetch-core-count@v1
        id: cores

      - name: Install Clang ${{ matrix.version }}
        run: sudo apt-get install -y clang-${{ matrix.version }}

      - name: Configure (install)
        env:
          CC: clang-${{ matrix.version }}
          CXX: clang-${{ matrix.version }}
        run: cmake -S . -B build/install
          -D CMAKE_CXX_STANDARD:STRING=${{ matrix.standard }}
          -D CMAKE_BUILD_TYPE:STRING=Release
          -D CMAKE_INSTALL_PREFIX=build/prefix
          -D CMAKE_CXX_COMPILER=clang++
          -D "CMAKE_PROJECT_FMT_INCLUDE_BEFORE=$(pwd)/cmake/fmtPICFix.cmake"

      - name: Build (install)
        run: cmake --build build/install -j ${{ steps.cores.outputs.plus_one }}

      - name: Install
        run: cmake --install build/install

      - name: Configure tests
        run: cmake -S tests -B build/tests
          -D CMAKE_BUILD_TYPE:STRING=Release
          -D CPP-LAZY_CATCH_VERSION:STRING=$CATCH_VERSION
          -D TEST_INSTALLED_VERSION:BOOL=YES
          -D CMAKE_CXX_COMPILER=clang++
          -D CMAKE_INSTALL_PREFIX=build/prefix

      - name: Build tests
        run: cmake --build build/tests -j ${{ steps.cores.outputs.plus_one }}

      - name: Run tests
        working-directory: build/tests
        run: ctest -VV -j ${{ steps.cores.outputs.plus_one }}

  msvc:
    strategy:
      matrix:
        os: [ windows-2019, windows-2022]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v1

      - uses: friendlyanon/fetch-core-count@v1
        id: cores

      - name: Configure (install)
        run: cmake -S . -B build/install
          -D CMAKE_BUILD_TYPE:STRING=Release
          -D CMAKE_INSTALL_PREFIX=build/prefix

      - name: Build (install)
        run: cmake --build build/install --config Release
          -j ${{ steps.cores.outputs.plus_one }}

      - name: Install
        run: cmake --install build/install --config Release

      - name: Configure tests
        run: cmake -S tests -B build/tests
          -D CPP-LAZY_CATCH_VERSION:STRING=$CATCH_VERSION
          -D TEST_INSTALLED_VERSION:BOOL=YES
          -D CMAKE_INSTALL_PREFIX=build/prefix

      - name: Build tests
        run: cmake --build build/tests --config Release
          -j ${{ steps.cores.outputs.plus_one }}

      - name: Run tests
        working-directory: build/tests
        run: ctest -C Release -VV -j ${{ steps.cores.outputs.plus_one }}

  examples:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - uses: friendlyanon/fetch-core-count@v1
        id: cores

      - name: Configure
        run: cmake -S examples -B build/examples
          -D CMAKE_BUILD_TYPE:STRING=Release

      - name: Build
        run: cmake --build build/examples -j ${{ steps.cores.outputs.plus_one }}
